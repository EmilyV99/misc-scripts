//start tango.zh
// tango.zh
// Version 1.3.1
// Standard settings -----------------------------------------------------------

// How fast messages scroll.
const int __TANGO_SCROLL_SPEED = 4;

// How much holding A speeds up text.
const int __TANGO_SPEEDUP_FACTOR = 5;

// If this is enabled, speedup keys pressed in the same frame a slot
// was activated will be ignored until they're pressed again.
const int __TANGO_IGNORE_NEWLY_PRESSED_SPEED_KEYS = 1;

// Whether the current string scrolls up before displaying the next one
// rather than just disappearing.
const int __TANGO_SCROLL_TO_NEXT = 0;

// Whether holding A or B speeds up scrolling to the next message.
const int __TANGO_SCROLL_SPEEDUP = 0;

// Whether a sound is played when a space is printed.
const int __TANGO_SFX_ON_SPACE = 1;

// Whether there's a delay before a space, as with printable characters.
const int __TANGO_DELAY_ON_SPACE = 1;

// Strings that advance automatically will wait this long before doing so.
const int __TANGO_AUTO_ADVANCE_TIME = 180;

// Whether [[double brackets]] change the text color instead of being printed.
const int __TANGO_ENABLE_BRACKET_HIGHLIGHT = 1;

// Menu cursors will take this long to travel between options.
// A speed of 1 or less is instantaneous.
const int __TANGO_MENU_CURSOR_TRAVEL_TIME = 0;

// The layer to draw on.
const int __TANGO_DRAWING_LAYER = 7;

// Which offscreen bitmap to use for text rendering.
const int __TANGO_BITMAP = 6;

// String codes are marked by this character.
// 64 is @
const int __TANGO_CODE_DELIMITER = 64;

// The maximum length of a string handled by @string. Increasing this will
// make the function take more space in the buffer, regardless of the argument.
// It's not necessary to account for the null terminator.
const int __TANGO_MAX_STRING_FUNC_LENGTH = 16;

// Logging level.
// 0: Don't log anything
// 1: Only log errors
// 2: Log all messages (only if loggingFull.zh is used)
const int __TANGO_LOGGING_LEVEL = 1;

// Whether to display a notification onscreen when an error is logged.
const int __TANGO_ONSCREEN_NOTIFICATION = 1;

// Onscreen error notification colors.
const int __TANGO_ERROR_NOTIFICATION_TEXT_COLOR = 1;
const int __TANGO_ERROR_NOTIFICATION_BG_COLOR = 0;

// End standard settings -------------------------------------------------------



// Advanced settings -----------------------------------------------------------

//custom functions and vars moved to seperate section of file

// Menu data
const int __TANGO_MAX_MENU_ITEMS = 20;
float __Tango_Data[34+(3*__TANGO_MAX_MENU_ITEMS)]; // 34+3*__TANGO_MAX_MENU_ITEMS

// Style data
const int __TANGO_NUM_STYLES = 10;
int __Tango_Styles[48 * __TANGO_NUM_STYLES]; // 48 * __TANGO_NUM_STYLES

// Text buffer and slots
int __Tango_Buffer[2048]; // Arbitrary size

const int __TANGO_NUM_SLOTS = 10;
int __Tango_SlotData[24 * __TANGO_NUM_SLOTS]; // 24 * __TANGO_NUM_SLOTS

// Slot types and definitions
const int TANGO_SLOT_NORMAL = 0;

int __Tango_SlotDefs[] = {
    // 0
    TANGO_SLOT_NORMAL,
    0, 1024,  // Starting index and length in __Tango_Buffer
    0, 0,     // X, Y on offscreen bitmap
    256, 512, // Width, height on offscreen bitmap
    
    // 1
    TANGO_SLOT_NORMAL,
    1024, 1024,
    256, 0,
    256, 512
};

// These must be implemented in order for TANGO_FLAG_FREEZE_SCREEN to work.
void __Tango_FreezeScreen()
{
	Screen_Freeze(1);
}

void __Tango_UnfreezeScreen()
{
	Screen_Freeze(0);
}

// Edit these functions to change which buttons are used.

// Return Link->Press* for advance/end string button
bool __Tango_PressAdvance(int waitTime)
{
    if(waitTime>=90)
        return Link->InputA || Link->InputB;
    else
        return Link->PressA;
}

// Return Link->Input* for advance/end string button
bool __Tango_InputAdvance()
{
    return Link->InputA;
}

// Unset Link->Input* and Link->Press* for advance/end string button
void __Tango_UnpressAdvance()
{
    Link->InputA=false;
    Link->PressA=false;
}

// Return Link->Press* for speedup button
bool __Tango_PressSpeedup()
{
    return Link->PressA;
}

// Return Link->Input* for speedup button
bool __Tango_InputSpeedup()
{
    return Link->InputA;
}

// Unset Link->Input* and Link->Press* for speedup button
void __Tango_UnpressSpeedup()
{
    Link->InputA=false;
    Link->PressA=false;
}

// Return Link->Press* for super speed button
bool __Tango_PressSuperSpeed()
{
    return Link->PressB;
}

// Return Link->Input* for super speed button
bool __Tango_InputSuperSpeed()
{
    return Link->InputB;
}

// Unset Link->Input* and Link->Press* for super speed button
void __Tango_UnpressSuperSpeed()
{
    Link->InputB=false;
    Link->PressB=false;
}

// Return Link->Press* for menu select button
bool __Tango_PressMenuSelect()
{
    return Link->PressA;
}

// Return Link->Press* for menu cancel button
bool __Tango_PressMenuCancel()
{
    return Link->PressB;
}

// Return Link->Input* for both menu select and cancel buttons
bool __Tango_InputMenu()
{
    return Link->InputA || Link->InputB;
}

// Unset Link->Input* and Link->Press* for menu select and cancel buttons
void __Tango_UnpressMenu()
{
    Link->InputA=false;
    Link->PressA=false;
    Link->InputB=false;
    Link->PressB=false;
}


// Import stringControlCode.zh instead of stringControlCodeDisabled.zh
// to enable string control codes.
//import "tango/1.3/stringControlCodeDisabled.zh"
import "tango/1.3/stringControlCode.zh"


// Import loggingFull.zh instead of loggingMinimal.zh for more useful
// error messages. This will bloat scripts, so it should only be used
// for debugging.
import "tango/1.3/loggingMinimal.zh"
//import "tango/1.3/loggingFull.zh"

// End advanced settings -------------------------------------------------------


import "tango/1.3/access.zh"
import "tango/1.3/common.zh"
import "tango/1.3/deprecated.zh"
import "tango/1.3/drawing.zh"
import "tango/1.3/font.zh"
import "tango/1.3/functions.zh"
import "tango/1.3/loading.zh"
import "tango/1.3/menu.zh"
import "tango/1.3/messages.zh"
import "tango/1.3/metrics.zh"
import "tango/1.3/processing.zh"
import "tango/1.3/style.zh"
import "tango/1.3/user.zh"
import "tango/1.3/validation.zh"

import "tango/1.3/script.z"
//end tango.zh
//start tango custom vars and functions
// Custom variables
float Tango_D[8]; // Access as @d0 to @d7; can be safely removed

const float VAR_TANGO_D0 =  0.0055;
const float VAR_TANGO_D7 =  0.0062;
const float VAR_TTEMP = 5.5232;
const float VAR_TTEMPI = 38.6633;

int tangoTempI = 0;
int tangoTemp = 0;

float Tango_GetCustomVar(int var)
{
    if(var>=VAR_TANGO_D0 && var<=VAR_TANGO_D7)
        return Tango_D[(var-VAR_TANGO_D0)*10000];
	else if(var==VAR_TTEMP)
		return 0;//Write-Only
	else if(var==VAR_TTEMPI)
		return tangoTempI;
    else
    {
        Tango_LogUndefinedVariable(var);
        return 0;
    }
}

void Tango_SetCustomVar(int var, float value)
{
    if(var>=VAR_TANGO_D0 && var<=VAR_TANGO_D7)
        Tango_D[(var-VAR_TANGO_D0)*10000]=value;
	else if(var==VAR_TTEMP)
		tangoTemp = value;
	else if(var==VAR_TTEMPI)
		tangoTempI = value;
    else
        Tango_LogUndefinedVariable(var);
}

// Custom functions

float __Tango_RunCustomFunction(float function, float args)
{
    Tango_LogUndefinedFunction(function);
    return 0;
}
//end
//start UTBS Setup

define TSTYLE_UTBS = 0;
define COMBO_PRESSA = 107;
define COMBO_SCRUP = 79;
define COMBO_SCRDWN = 83;
int MainTangoSlot = TANGO_INVALID;

void ShowStringAndWait(int str)
{
	ShowStringAndWait(str,false);
}

void ShowStringAndWait(int str, bool menu4way)
{
	int slot = ShowString(str,TSTYLE_UTBS);
	handleMessageSlot(slot,menu4way);
}

void handleMessageSlot(int slot)
{
	handleMessageSlot(slot,false);
}

void handleMessageSlot(int slot, bool menu4way)//start handleMessageSlot
{
	int delay = 0;
	int lastid = 0;
	while(Tango_SlotIsActive(slot))
	{
		bool menuActive = Tango_MenuIsActive();
		if(Tango_SlotIsFinished(slot)||menuActive||waitingForA)
		{
			int maxScroll = Tango_GetSlotMaxScrollPos(slot);
			int scroll = Tango_GetSlotScrollPos(slot);
			//Scrolling
			float scrollSpeed = 1.5;
			if(Link->InputA)scrollSpeed*=2;
			if(Link->InputUp)
				Tango_ScrollSlot(slot, -scrollSpeed);
			else if(Link->InputDown)
				Tango_ScrollSlot(slot, scrollSpeed);
			//Scroll arrows
			if(scroll<maxScroll)
			{
				Screen->FastCombo(7,208,56+9,COMBO_SCRDWN,0,OP_OPAQUE);
				delay = __TANGO_AUTO_ADVANCE_TIME;
				if(Link->PressB)
				{
					Link->PressB=false;
					Link->InputB=false;
					Tango_ScrollSlot(slot,maxScroll);
				}
			}
			if(!menuActive&&(scroll==maxScroll||waitingForA))
			{
				Screen->FastCombo(7,208,48+9,COMBO_PRESSA,0,OP_OPAQUE);//Press A indicatior
			}
			if(scroll>0)
			{
				Screen->FastCombo(7,208,18+9,COMBO_SCRUP,0,OP_OPAQUE);
			}
			//Fix menu cursor when scrolling
			if(menuActive&&scroll!=maxScroll)
			{
				Tango_SetMenuCursor(0,0);
				NoDirs();
			}
			else if(menuActive)
			{
				Tango_SetMenuCursor(TANGO_MENU_CURSOR_COMBO,0);
				if(Link->PressRight)
				{
					VTango_ChoiceShift(1);
				}
				else if(Link->PressLeft)
				{
					VTango_ChoiceShift(-1);
				}
				else if(menu4way)
				{
					if(Link->PressUp)
					{
						VTango_ChoiceShift(-2);
					}
					else if(Link->PressDown)
					{
						VTango_ChoiceShift(2);
					}
				}
				NoDirs();
			}
			if(scroll!=maxScroll&&!waitingForA)NoAction();
			if(delay>0)
			{
				delay--;
				Link->InputA=Link->PressA;
				Link->InputB=Link->PressB;
			}
			if(Link->PressA)waitingForA=false;
		}
		Link->PressStart=false;
		Link->InputStart=false;
		Waitframe();
	}
}//end handleMessageSlot

void VTango_ChoiceShift(int shift)
{
	int pos = Tango_GetMenuCursorPosition()+shift;
	if(pos>=__Tango_Data[__TDIDX_CHOICE_COUNT])pos=0;
	else if(pos<0)pos=__Tango_Data[__TDIDX_CHOICE_COUNT]-1;
	Tango_SetMenuCursorPosition(pos);
}

int ShowString(int str, int style)
{
	if(MainTangoSlot==TANGO_INVALID)
	{
		MainTangoSlot = Tango_GetFreeSlot(TANGO_SLOT_ANY);
		if(MainTangoSlot==TANGO_INVALID)
			return TANGO_INVALID;
	}
	Tango_ClearSlot(MainTangoSlot);
	Tango_LoadString(MainTangoSlot,str);
	Tango_SetSlotStyle(MainTangoSlot,style);
	Tango_SetSlotPosition(MainTangoSlot,32,TANGO_DISPLAY_HEIGHT);
	Tango_ActivateSlot(MainTangoSlot);
	
	return MainTangoSlot;
}

void TangoInit()
{
	setupStyles();
	Tango_Start();
}

void setupStyles()//start styles
{
	//COMMON: (Default and Signs)
	Tango_SetStyleAttribute(TSTYLE_UTBS,TANGO_STYLE_BACKDROP_TYPE,TANGO_BACKDROP_TILE);
	Tango_SetStyleAttribute(TSTYLE_UTBS,TANGO_STYLE_BACKDROP_CSET,CSET_TANGO_BACKDROP);
	Tango_SetStyleAttribute(TSTYLE_UTBS,TANGO_STYLE_BACKDROP_TILE,TILE_TANGO_BACKDROP);
	Tango_SetStyleAttribute(TSTYLE_UTBS,TANGO_STYLE_BACKDROP_WIDTH,TANGO_BACKDROP_WIDTH);
	Tango_SetStyleAttribute(TSTYLE_UTBS,TANGO_STYLE_BACKDROP_HEIGHT,TANGO_BACKDROP_HEIGHT);
	
	Tango_SetStyleAttribute(TSTYLE_UTBS,TANGO_STYLE_TEXT_FONT,TANGO_FONT_GUI);
	Tango_SetStyleAttribute(TSTYLE_UTBS,TANGO_STYLE_TEXT_CSET,Floor(TEXT_COLOR / 16));
	Tango_SetStyleAttribute(TSTYLE_UTBS,TANGO_STYLE_TEXT_COLOR,TEXT_COLOR % 16);
	Tango_SetStyleAttribute(TSTYLE_UTBS,TANGO_STYLE_TEXT_X,8);
	Tango_SetStyleAttribute(TSTYLE_UTBS,TANGO_STYLE_TEXT_Y,3);
	Tango_SetStyleAttribute(TSTYLE_UTBS,TANGO_STYLE_TEXT_WIDTH,176);
	Tango_SetStyleAttribute(TSTYLE_UTBS,TANGO_STYLE_TEXT_HEIGHT,42);
	Tango_SetStyleAttribute(TSTYLE_UTBS,TANGO_STYLE_TEXT_SPEED,3);
	Tango_SetStyleAttribute(TSTYLE_UTBS,TANGO_STYLE_TEXT_SFX,18);
	
	//Alt (()) [[]] {{}} <<>>
	Tango_SetStyleAttribute(TSTYLE_UTBS,TANGO_STYLE_ALT_CSET_1,1);
	Tango_SetStyleAttribute(TSTYLE_UTBS,TANGO_STYLE_ALT_COLOR_1,7);
	Tango_SetStyleAttribute(TSTYLE_UTBS,TANGO_STYLE_ALT_CSET_2,0);
	Tango_SetStyleAttribute(TSTYLE_UTBS,TANGO_STYLE_ALT_COLOR_2,7);
	Tango_SetStyleAttribute(TSTYLE_UTBS,TANGO_STYLE_ALT_CSET_3,1);
	Tango_SetStyleAttribute(TSTYLE_UTBS,TANGO_STYLE_ALT_COLOR_3,3);
	Tango_SetStyleAttribute(TSTYLE_UTBS,TANGO_STYLE_ALT_CSET_4,5);
	Tango_SetStyleAttribute(TSTYLE_UTBS,TANGO_STYLE_ALT_COLOR_4,13);
	
	Tango_SetStyleAttribute(TSTYLE_UTBS,TANGO_STYLE_MENU_CURSOR_COMBO,TANGO_MENU_CURSOR_COMBO);
	Tango_SetStyleAttribute(TSTYLE_UTBS,TANGO_STYLE_MENU_CURSOR_CSET,TANGO_MENU_CURSOR_CSET);
	Tango_SetStyleAttribute(TSTYLE_UTBS,TANGO_STYLE_MENU_CHOICE_INDENT,16);
	
	Tango_SetStyleAttribute(TSTYLE_UTBS,TANGO_STYLE_MENU_CURSOR_MOVE_SFX,5);
	Tango_SetStyleAttribute(TSTYLE_UTBS,TANGO_STYLE_MENU_SELECT_SFX,83);
	Tango_SetStyleAttribute(TSTYLE_UTBS,TANGO_STYLE_MENU_CANCEL_SFX,5);
	//Flags
	Tango_SetStyleAttribute(TSTYLE_UTBS,TANGO_STYLE_FLAGS,TANGO_FLAG_ENABLE_SPEEDUP | TANGO_FLAG_ENABLE_SUPER_SPEED);
}//end
//end
